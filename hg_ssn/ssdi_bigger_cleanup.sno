#
# Fake Identity Generator
# Copyright (C) 2011-2016 Hibbard M. Engler (Bitcoin address 1ERDHsxtekdh5FAsxdb92PBFK7nnuwMkbp for gifts)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

	numbers = span('0123456789')
	worda = &alphabet
	worda '|' = ''
	word = span(worda) | ''
	
	date_day = any('0123456789') any('0123456789') | any('0123456789')
	date_month = 'Jan' | 'Feb' | 'Mar' | 'Apr' | 'May' | 'Jun' |
+	     'Jul' | 'Aug' | 'Sep' | 'Oct' | 'Nov' | 'Dec'
	date_year =  any('0123456789') any('0123456789') any('0123456789') any('0123456789')
	datex = ( date_day . the_day '-' date_month . the_month '-' date_year . the_year '' . the_junk_month )
+              | 	( date_month . the_month ' ' date_day . the_day ', ' date_year . the_year '' . the_junk_month )
+              | 	( date_month . the_month ' ' date_year . the_year  '' . the_day rpos(0) '' . the_junk_month )
+              | 	( date_month . the_junk_month '/'  date_day . the_day '/' date_year . the_year '' . the_month  rpos(0) '' . the_junk_month )
+              | 	( '' . the_month date_year . the_year  '' . the_day rpos(0) '' . the_junk_month )
* note - we don't fully handle the junk month yet - but that is ok because all the month in this format ere 00/dd/yyyy anyways from what I have seen
	
	threedig = any('0123456789') any('0123456789')  any('0123456789')
	fourdig =   any('0123456789') any('0123456789') any('0123456789') any('0123456789')
	twodig =  any('0123456789') any('0123456789') 
	
	q = '|'
	
	dates = table()
	dates<'Jan'> = 0
	dates<'Feb'> = dates<'Jan'> + 31
	dates<'Mar'> = dates<'Feb'> + 28
	dates<'Apr'> = dates<'Mar'> + 31
	dates<'May'> = dates<'Apr'> + 30
	dates<'Jun'> = dates<'May'> + 31
	dates<'Jul'> = dates<'Jun'> + 30
	dates<'Aug'> = dates<'Jul'> + 31
	dates<'Sep'> = dates<'Aug'> + 31
	dates<'Oct'> = dates<'Sep'> + 30
	dates<'Nov'> = dates<'Oct'> + 31
	dates<'Dec'> = dates<'Nov'> + 30

	datesl = table()
	datesl<'Jan'> = 0
	datesl<'Feb'> = datesl<'Jan'> + 31
	datesl<'Mar'> = datesl<'Feb'> + 28
	datesl<'Apr'> = datesl<'Mar'> + 31
	datesl<'May'> = datesl<'Apr'> + 30
	datesl<'Jun'> = datesl<'May'> + 31
	datesl<'Jul'> = datesl<'Jun'> + 30
	datesl<'Aug'> = datesl<'Jul'> + 31
	datesl<'Sep'> = datesl<'Aug'> + 31
	datesl<'Oct'> = datesl<'Sep'> + 30
	datesl<'Nov'> = datesl<'Oct'> + 31
	datesl<'Dec'> = datesl<'Nov'> + 30

	define('date_to_day(xd)days,leaps,dt')
	DEFINE('initcap(s)a,b,c,b2,r2')

* translate from the group number to the sequence of the group
	tr = table()
	tr<'01'> = '01'
	tr<'03'> = '02'
	tr<'05'> = '03'
	tr<'07'> = '04'
	tr<'09'> = '05'
        tr<'10'> = '06'
        tr<'12'> = '07'
        tr<'14'> = '08'
        tr<'16'> = '09'
        tr<'18'> = '10'
        tr<'20'> = '11'
        tr<'22'> = '12'
        tr<'24'> = '13'
        tr<'26'> = '14'
        tr<'28'> = '15'
        tr<'30'> = '16'
        tr<'32'> = '17'
        tr<'34'> = '18'
        tr<'36'> = '19'
        tr<'38'> = '20'
        tr<'40'> = '21'
        tr<'42'> = '22'
        tr<'44'> = '23'
        tr<'46'> = '24'
        tr<'48'> = '25'
        tr<'50'> = '26'
        tr<'52'> = '27'
        tr<'54'> = '28'
        tr<'56'> = '29'
        tr<'58'> = '30'
        tr<'60'> = '31'
        tr<'62'> = '32'
        tr<'64'> = '33'
        tr<'66'> = '34'
        tr<'68'> = '35'
        tr<'70'> = '36'
        tr<'72'> = '37'
        tr<'74'> = '38'
        tr<'76'> = '39'
        tr<'78'> = '40'
        tr<'80'> = '41'
        tr<'82'> = '42'
        tr<'84'> = '43'
        tr<'86'> = '44'
        tr<'88'> = '45'
        tr<'90'> = '46'
        tr<'92'> = '47'
        tr<'94'> = '48'
        tr<'96'> = '49'
        tr<'98'> = '50'
        tr<'02'> = '51'
        tr<'04'> = '52'
        tr<'06'> = '53'
        tr<'08'> = '54'
        tr<'11'> = '55'
        tr<'13'> = '56'
        tr<'15'> = '57'
        tr<'17'> = '58'
        tr<'19'> = '59'
        tr<'21'> = '60'
        tr<'23'> = '61'
        tr<'25'> = '62'
        tr<'27'> = '63'
        tr<'29'> = '64'
        tr<'31'> = '65'
        tr<'33'> = '66'
        tr<'35'> = '67'
        tr<'37'> = '68'
        tr<'39'> = '69'
        tr<'41'> = '70'
        tr<'43'> = '71'
        tr<'45'> = '72'
        tr<'47'> = '73'
        tr<'49'> = '74'
        tr<'51'> = '75'
        tr<'53'> = '76'
        tr<'55'> = '77'
        tr<'57'> = '78'
        tr<'59'> = '79'
        tr<'61'> = '80'
        tr<'63'> = '81'
        tr<'65'> = '82'
        tr<'67'> = '83'
        tr<'69'> = '84'
        tr<'71'> = '85'
        tr<'73'> = '86'
        tr<'75'> = '87'
        tr<'77'> = '88'
        tr<'79'> = '89'
        tr<'81'> = '90'
        tr<'83'> = '91'
        tr<'85'> = '92'
        tr<'87'> = '93'
        tr<'89'> = '94'
        tr<'91'> = '95'
        tr<'93'> = '96'
        tr<'95'> = '97'
        tr<'97'> = '98'
	tr<'99'> = '99'	



	tab = char(9)
	rest = span(&alphabet)
	mdod = tab 'Death date : ' rest . dod
	mssn = tab 'SS# : ' rest . the_ssn
	mresidence_code = tab 'Residence code : ' rest . residence_code
	mzip = tab 'Zip code of last known residence : ' rest . the_zip
	mpayment_zip = tab 'Zip code of address where death payment was sent : ' rest . the_pay_zip
	missued_in = tab 'Issued in : ' rest . the_state
	mknown_line = mdod | mssn | mresidence_code | mzip | mpayment_zip | missued_in 
	
	
	suffixes = 'Jr.' | 'Sr.' | 'M.D.' | 'Do' | 'Ma' | 'Sm' | 'Ba' | 'Am' | 'Jd' | 'Esq' | 'Senior' | 'Ab' | 'Dds' | 'Junior'
	
	mt = &alphabet
	mt tab = ''
	mt ',' = ''
	mt2 = mt
	mt2 ' ' = ''
	maname = ( span(mt) . lname ', ' span(mt2) . fname ( (' ' span(mt) . mname) | ( '' . mname )  ) ', ' ( suffixes ) ) |
+	      ( span(mt) . lname ', ' span(mt2) . fname ( (' ' span(mt) . mname) | ( '' . mname )  )  )
	
	mbirth_date = 'Birth date : ' rest . dob
	regular_line = ( maname . the_name tab mbirth_date ) |
+			( maname . the_name tab 'Issued in : ' rest . the_state )

       DEFINE('lower(s)')
	UP_LO  =  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
	LO_UP  =  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'
						:(UPLO_END)
lower    lower   =  REPLACE(S, UP_LO, LO_UP)      :(RETURN)
UPLO_END



	DEFINE('upper(s)')
	xUP_LO  =  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
	xLO_UP  =  'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'
						:(xUPLO_END)
upper   upper   =  REPLACE(S, xUP_LO, xLO_UP)      :(RETURN)
xUPLO_END


						:(yUPLO_END)
initcap a = s
	b = ''
	c = ''
	&anchor = 1
initcapl
	a arbno(any(&alphabet)) . r2 ( any(UP_LO) . b word . b2 | any(UP_LO) . b '' . b2 ) = ''    :s(initcaps)
	c = c a
	initcap = c
	:(RETURN)
initcaps
	c = c r2 upper(b) lower(b2)
	:(initcapl)
yUPLO_END



	topx = ''

	first = '1'

	&anchor = 1
clearloop	
	fname = ''
	lname = ''
	dob = ''
	dob2 = ''
	dob_days = ''
	the_state = ''
clearloop2
	dod = ''
	dod2 = ''
	dod_days = ''
	the_ssn = ''
	prefix = ''
	segment = ''
	serial = ''
	sseq = ''

loop	x = input	:f(endmaybee)
        &anchor = 0
	x char(13) = ''
	&anchor = 1
	x 'Social Security Death Index:'	:s(loop)
	x rpos(0)	:s(loop)
	x tab rpos(0)	:s(loop)
	x char(9)	:s(additional)
	
	first '1'	:s(noprint)
* this is a print run - it is duplicated twice 	
printit	
	dob '1-Dec-0000' = ''
	dob 'Dec 1, 0000' = ''
	dob '' rpos(0) :s(skipa)
	dob datex	:f(baddob)
	the_day '' rpos(0) = '15'
	the_month '' rpos(0) = 'Jan'
	dob2 = the_day '-' the_month '-' the_year
	dob_days = date_to_day(dob)
skipa
	
	dod '' rpos(0) :s(skipb)
	dod datex	:f(baddod)
	the_day '' rpos(0) = '15'
	the_month '' rpos(0) = 'Jan'
	dod2 = the_day '-' the_month '-' the_year
	dod_days = date_to_day(dod)
skipb
	&anchor = 0
	the_ssn '-' = ''
	the_ssn '-' = ''
	&anchor = 1
	
	the_ssn threedig . prefix  twodig . segment fourdig . serial
	sseq = tr<segment> serial
	output = the_ssn q prefix q segment q serial q sseq q  initcap(fname) q 
+		initcap(mname) q initcap(lname) q a q b q initcap(the_city) q
+	initcap(the_state) q the_zip q c q dob2 q dod2 q d q e q dob_days q dod_days
	first '2'	:s(endd)
noprint
	first = '0'
	topx = x
	x regular_line	:s(cc)
	terminal = 'x no match ' x  :(clearloop)
cc
	:(clearloop2)
	:(loop)
	
endmaybee
	first '1'	:s(endd)
	first = 2	:(printit)







additional
	x mknown_line 	:f(bad_line)
	:(loop)



bad_line
	terminal = 'bad: ' x
	:(loop)

* date_to_day converts to the number of days - where day 1 is Jan 1, 1776	
date_to_day	
	xd datex
	the_day '' rpos(0) = '15'
	the_month '' rpos(0) = 'Jan'
	days = the_day
	days = days + 365 * (the_year - 1776)
	leaps = chop( (the_year - 1777) * 0.25)
	&anchor = 0
	leaps '.' = ''
	&anchor = 1
	days = days + leaps
	eq(remdr(the_year - 1776 , 4) , 0)	:s(leapy)
	dt = dates

	:(endleapy)
leapy
	dt = datesl
endleapy
	days = days + dt<the_month>
	days = days + the_day - 1
	date_to_day = days	:(return)
	
	
	
	



bad	terminal = 'bad ' x
	:(loop)
baddob	terminal = 'bad dob ' dob ' x ' topx
	terminal = 'bdob: ' the_ssn q prefix q segment q serial q sseq q  initcap(fname) q 
+		initcap(mname) q initcap(lname) q a q b q initcap(the_city) q
+	initcap(the_state) q the_zip q c q dob2 q dod2 q d q e q dob_days q dod_days

	:(noprint)
baddod	terminal = 'bad dod ' dod ' x ' topx
	terminal = 'bdod: ' the_ssn q prefix q segment q serial q sseq q  initcap(fname) q 
+		initcap(mname) q initcap(lname) q a q b q initcap(the_city) q
+	initcap(the_state) q the_zip q c q dob2 q dod2 q d q e q dob_days q dod_days
	:(noprint)





endd

end
